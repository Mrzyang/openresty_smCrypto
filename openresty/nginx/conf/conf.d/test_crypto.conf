server {
    listen 8083;
    server_name localhost;

    location /test/sm2 {
        content_by_lua_block {
            local test_module = require "api_gateway.test_sm2_crypto"
            test_module.test_sm2()
        }
    }

    location /debug/sm2 {
        content_by_lua_block {
            local debug_module = require "api_gateway.debug_sm2"
            debug_module.debug_sm2()
        }
    }

    location /debug/detailed_sm2 {
        content_by_lua_block {
            local debug_module = require "api_gateway.debug_detailed_sm2"
            debug_module.debug_detailed_sm2()
        }
    }

    location = /t1 {
        content_by_lua_block {
            local resty_sm2 = require "resty.sm2"
            local resty_str = require "resty.utils.string"
            local pubkey, prvkey = resty_sm2.generate_key()
            local data = "ssssssssss"
            local digests = {"sm3", "sha1", "sha224", "sha256", "sha384", "sha512", "sha3-224", "sha3-256", "sha3-384", "sha3-512"}
            for _, digest in ipairs(digests) do
                local sm2_for_sign, err = resty_sm2.new({
                    private_key = prvkey,
                    public_key = pubkey,
                    algorithm = digest,
                    id = "toruneko@outlook.com"
                })
                if err then
                    ngx.log(ngx.ERR, "init:", err)
                end
                local signed, err = sm2_for_sign:sign(data)
                if err then
                    ngx.log(ngx.ERR, "sign:", err)
                end
                local sm2_for_verify, err = resty_sm2.new({
                    public_key = pubkey,
                    algorithm = digest,
                    id = "toruneko@outlook.com"
                })
                local ok , err = sm2_for_verify:verify(data, signed)
                if err then
                    ngx.log(ngx.ERR, "verify:", err)
                end
                ngx.say(digest .. ":" .. tostring(ok))
            end
        }
    }

    location = /t2 {
        content_by_lua_block {
            local resty_sm2 = require "resty.sm2"
            local resty_str = require "resty.utils.string"
            local pubkey, prvkey = resty_sm2.generate_eckey()
            local data = "ssssssssss"
            local digests = {"sm3", "sha1", "sha224", "sha256", "sha384", "sha512", "sha3-224", "sha3-256", "sha3-384", "sha3-512"}
            for _, digest in ipairs(digests) do
                local sm2_for_sign, err = resty_sm2.new({
                    private_key = prvkey,
                    public_key = pubkey,
                    algorithm = digest,
                    id = "toruneko@outlook.com"
                }, true)
                if err then
                    ngx.log(ngx.ERR, "init:", err)
                end
                local signed, err = sm2_for_sign:sign(data)
                if err then
                    ngx.log(ngx.ERR, "sign:", err)
                end
                local sm2_for_verify, err = resty_sm2.new({
                    public_key = pubkey,
                    algorithm = digest,
                    id = "toruneko@outlook.com"
                }, true)
                local ok , err = sm2_for_verify:verify(data, signed)
                if err then
                    ngx.log(ngx.ERR, "verify:", err)
                end
                ngx.say(digest .. ":" .. tostring(ok))
            end
        }
    }
}